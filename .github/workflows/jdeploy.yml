# This workflow will build a Java project with Maven and bundle them as native app installers with jDeploy
# See https://www.jdeploy.com for more information.

name: jDeploy CI with Maven

on:
  push:
    branches: ['*', '!gh-pages']
    tags: ['*']

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install xvfb
      - name: Set up Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          java-package: jdk+fx
          distribution: zulu
          cache: maven
      - name: Build with Maven
        run: xvfb-run bash build.sh jar
      - name: List files in ./target
        run: ls -l ./javase/target
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-target
          path: ./javase/target
      - name: Build App Installer Bundles
        uses: shannah/jdeploy@sign-package-files
        with:  
          github_token: ${{ secrets.GITHUB_TOKEN }}
          jdeploy_version: 'git://sign-package-files'
  create_and_upload_dmg:
    permissions:
      contents: write
    runs-on: macos-latest
    needs: build
    steps:
      - name: Set up Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
      - uses: actions/checkout@v3
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-target
          path: ./javase/target
      - name: List files in ./javase/target
        run: ls -l ./javase/target
      - name: Create DMG and Upload to Release
        uses: shannah/jdeploy-action-dmg@main
        with:
          jdeploy_version: 'git://sign-package-files'  # Or specify a version like 'git://main' or '4.0.51'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          developer_id: ${{ secrets.MAC_DEVELOPER_ID }}
          developer_team_id: ${{ secrets.MAC_DEVELOPER_TEAM_ID }}
          developer_certificate_name: ${{ secrets.MAC_DEVELOPER_CERTIFICATE_NAME }}
          developer_certificate_p12_base64: ${{ secrets.MAC_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          developer_certificate_password: ${{ secrets.MAC_DEVELOPER_CERTIFICATE_PASSWORD }}
          notarization_password: ${{ secrets.MAC_NOTARIZATION_PASSWORD }}
          
